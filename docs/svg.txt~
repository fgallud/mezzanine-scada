This document explain how to create a svg file to create an svg object for
an schematic view inside the scada web.

The idea is to have a svg that contains multiple fields:

in the svg metadata we put some needed information:

refresh_time is the time in between refresh of the data values in seconds.
For instance:
File->Document properties->Metadata->description:   refresh_time=10.0

indicates a refresh time of 10.0seconds 

You can embed svg files in the html page like:

<div class="container">
  <object class="scada_svg" data= "{% static "img/schematic.svg" %}" type="imag
    <!--  <img src="yourfallback.jpg" />-->
  </object>
</div>

You must use a object tag and the class must be scada_svg



- Text fields that are refreshed with the value of a variable.
  This fields are text items. In inkscape can be created just adding a text.
  Then, in the XML Editor (Shift+Ctrl+X), add:
  class = "scada_variable my_variable_name"
  This indicates to the javascript code that this text item should be filled
  with the value of the variable my_variable_name 


- color indicators: are shapes that can be painted in different colors
  depending on the value of a variable.
  in inkscape they are elements that in the description field is:
  color_indicator:my_variable:{"color1":value1, "color2":value2, ...}
  in this case it means that if the variable my_variable is value1, then the
  shape must be painted with color1, if its value is value2, then the color
  must be color2, etc...

- color controllers: are shapes that can be painted in different colors
  depending on the value of a variable and can change the behavior of some
  state machine. 

  This interaction is the most difficult attribute. If the user click in one
  object, can generate some different actions.

  If its an element involved in a state machine, it send a message to the
  server with an ajax call that will modify the state of the
  state machine. But this can change the whole user interface (some elements
  can change its colors or even some shapes will hidden). That means that the
  whole user interface must change as quickly as posible. The server response
  can be slow so something needs to be done in the client side so the user
  don't think the click was missed and click again.

  the solution is to put all interactive shapes in a grey color until the new
  situation is clarified by the server 

  Then we have a shape that we need this kind of behavior we put in the
  description: 

  color_controller:my_function:my_arguments:my_variable:{"color1":value1, "color2":value2, ...}

  while the user don't click this element, it will behave as a
  color_indicator but if the user clicks, then all color_indicators in the page
  will change its colors (they will be a mixture of the current one and grey)
  and the client will execute an ajax call to the function my_function with
  my_arguments as arguments. Moreover, the client will trigger a refresh of
  all variables in the page.

  for now, it just triggers a refresh in the page so the user will know that
  somthing is going on and all the page elements will refresh properly.


