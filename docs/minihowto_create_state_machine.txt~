We are going to create an example state machine control

The state machine is a water container that we want allways filled.

The system is:

  - a water container with two level sensors. One measures if the container
    is to the full and another measures if the container is empty.
  - the water is consumed at an unkown rate.
  - There is a valve that refills the container when is open.

  the control must maintain the container allways with water.

   - when the container runs out of water the control must open the valve
     until the container is to the full again. Then it waits until the
     container is empty again.

The hardware involved are:
  - a water tank
  - a level sensor at the top of the tank that measures if the container is
    to the top.
  - a level sensor at the bottom of the tank that measures if the container
    runs out of water
  - a refill element (a valve that can be opened or a pump that can be
    turned on)

The variables in the system are:
  - level_up is 0.0 if the container is not to the full and 1.0 if it is to
    the full.
  - level_down is 0.0 if the container is empty and 1.0 if the container
    have some water. 

  - in_valve is an output variable that is set to 0.0 if the valve must be
    closed and 1.0 if the valve must be opened in order to refill the
    container


In the software:

Every control is an app. To create the control the steps are:
  - create a new app. In this case:
    python3 manage.py startapp water_tank

  - In the models.py you must create all needed data. In this case:

class filling_tank(models.Model):
    state_time = models.FloatField(default=10.0)
    high_level_sensor= models.ForeignField(variable)
    high_level_active_value= models.BooleanField(default=True)
    bottom_level_sensor= models.ForeignField(variable)
    bottom_level_active_value = models.BoobleanField(default=False)
    filling_element=  models.ForeignField(variable)


  state_time is the time in seconds that goes by between the state function
runs.

  the high_level_sensor and bottom_level_sensor are the variables that are associated with the up
and bottom level sensors.

  the high_level_active_value and bottom_level_active_value are the boolean
values that indicates that the state must change.


  filling_tank.py contains a class that is inherited from state_machine that
is the state machine needed.


   we have four states:
     - auto_filling: it is after the water falls bellow the bottom level and
       before the water level reach the top level.
     - auto_filled: Is after the water level reach the top level, and before
       the water level reach the bottom level.
     - manual_on. The user have decided to activate the element that add
       water to the tank.
     - manual_off. The user have decided to deactivate the element that add
       watter to the tank.

   The four state functions are:
     - auto_filling state: activate the element that adds water.
     - auto_filled  state: deactivate the element that adds water.
   The init state functions are:
     None. It seems more logical that the state functions were None and
     The init functions activated and deactivated the refilling element but
     in case of error activating or deactivating it will be fatal.
   The condition functions. There are only two of them
     - from filling to filled compare if the high level sensor is the active
       value.
     - from filled to filling compare if the bottom level sensor is the
       active value.
 
     to or from manual values there aren't any condition because is the user
     through the GUI who takes the decision and this is through a xmlrpc call to
     the change_state method.


the scadathrea


